*chime.txt*				Diagnostic handler for the echo area.

=============================================================================
Chime								      *chime*

Chime is a diagnostic handler that displays messages in the echo area, usually
the bottom of the screen.

=============================================================================
Configuration						*chime-configuration*

This plugin provides a |diagnostic-handler| and is configured using
|vim.diagnostic.config()|.

It has the following defaults: >lua

  vim.diagnostic.config({
    chime = {
      format = function()
	...
      end,
      severity = nil,
      severity_sort = false,
      trim = true,
    }
  })

Each field is explained in the sections below.

Format ~
								*chime-format*
Function that receives a |vim.Diagnostic| and formats it. Can return a string
or a list of highlighted chunks, as the first argument of |nvim_echo()|. A
simple example that returns a string: >lua

  vim.diagnostic.config({
    chime = {
      format = function(diagnostic)
	return ('[%s] %s (%s)'):format(
	  -- this assumes the default sign text
	  vim.diagnostic.severity[diagnostic.severity],
	  diagnostic.message,
	  diagnostic.source,
	)
      end
    }
  })

And a complexer example that returns chunks: >lua

  vim.diagnostic.config({
    chime = {
      format = function(diagnostic)
	local severity_text = vim.diagnostic.severity[diagnostic.severity]
	local severity_color = ({
	    'DiagnosticError',
	    'DiagnosticWarn',
	    'DiagnosticInfo',
	    'DiagnosticHint',
	})[diagnostic.severity]

	return {
	  { ('[%s] '):format(severity_text), severity_color },
	  -- prevent "Press enter" prompts by only showing first line
	  { vim.split(diagnostic.message, '\n')[1] },
	  { (' (%s)'):format(diagnostic.source), "Comment" },
	}
      end
    }
  })

Severity ~
							      *chime-severity*
Filter on severities. See |diagnostic-severity| on how to implement it.

Severity Sort ~
							 *chime-severity-sort*
Sort by severity. It is recommended to set this to true. See
|vim.diagnostic.Opts|.

Trim ~
								  *chime-trim*
Trim the diagnostic message to fit |v:echospace|, preventing the "Press ENTER"
prompt.

Show on keymap ~
						   *chime-show* *chime-manual*
To only show diagnostics manually, for example with a custom keymap, disable
the handler and map `chime.show()`: >lua

  vim.diagnostic.config({ chime = false })
  vim.keymap.set('n', '<leader>d', function()
    require('chime').show()
  end)
<
								*chime-toggle*
Chime can be toggled on the fly by its diagnostic handler: >vim

  " disable Chime
  :lua vim.diagnostic.config({ chime = false })
  " and enable again
  :lua vim.diagnostic.config({ chime = true })
<

vim:tw=78:ts=8:noet:ft=help:norl:
